basePath: /
definitions:
  controllers.LoginRequest:
    description: User login request payload
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    description: User registration request payload
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.Category:
    description: Product category information
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Electronics
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.ErrorResponse:
    description: Standard error response format
    properties:
      error:
        example: Error message
        type: string
    type: object
  models.Order:
    description: Order information
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      status:
        example: pending
        type: string
      total:
        example: 99.99
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.Product:
    description: Product information
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: High-performance laptop
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Laptop
        type: string
      price:
        example: 999.99
        type: number
      stock:
        example: 10
        type: integer
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.TokenResponse:
    description: Login response with JWT token
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.User:
    description: User account information
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      role:
        example: user
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: cetinkayah20@itu.edu.tr
    name: Hakan Ã‡etinkaya
    url: https://github.com/itu-itis22-cetinkayah20
  description: A high-performance RESTful API built with Go Fiber framework featuring
    JWT authentication and automated testing
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Fiber API
  version: "1.0"
paths:
  /api/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all product categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all categories
      tags:
      - Categories
  /api/orders:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of user orders
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order for the authenticated user
      parameters:
      - description: Order data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created order
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create new order
      tags:
      - Orders
  /api/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Cancel/delete a specific order for the authenticated user
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Simulate error (400 for bad request)
        in: query
        name: simulate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Cancel order
      tags:
      - Orders
  /api/products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all products with their categories
      parameters:
      - description: Simulate error (500 for server error)
        in: query
        name: simulate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all products
      tags:
      - Products
  /api/products/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get product by ID
      tags:
      - Products
  /api/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's profile information
      parameters:
      - description: Simulate error (404 for not found)
        in: query
        name: simulate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Updated profile data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - Profile
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with token
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, first name, and last
        name
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
